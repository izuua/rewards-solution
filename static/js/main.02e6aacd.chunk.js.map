{"version":3,"sources":["components/Customers/index.js","components/Wrapper/index.js","components/Title/index.js","App.js","serviceWorker.js","index.js"],"names":["CustomerCard","props","className","name","transaction","rewards","Wrapper","children","Title","App","state","transactions","forEach","element","this","setState","map","customer","id","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6pBAuBeA,MApBf,SAAsBC,GAClB,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,WACX,4BACI,qCACWD,EAAME,MAEjB,oDAC0BF,EAAMG,aAEhC,wCACcH,EAAMI,QADpB,e,MCPLC,MAJf,SAAiBL,GACb,OAAO,yBAAKC,UAAU,WAAWD,EAAMM,W,MCG5BC,MAJf,SAAeP,GACX,OAAO,wBAAIC,UAAU,SAASD,EAAMM,W,OC4CzBE,G,iNAxCbC,MAAQ,CACNC,gB,mFAKAA,EAAaC,SAAQ,SAAUC,GACzBA,EAAQT,aAAe,GAEzBS,EAAQR,QAAU,EACTQ,EAAQT,YAAc,IAAMS,EAAQT,aAAe,IAE5DS,EAAQR,QAAuC,GAA5BQ,EAAQT,YAAc,IAChCS,EAAQT,YAAc,MAE/BS,EAAQR,QAAwC,GAA7BQ,EAAQT,YAAc,KAAW,OAIxDU,KAAKC,SAAS,CAAEJ,mB,+BAIhB,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,wBACCG,KAAKJ,MAAMC,aAAaK,KAAI,SAAAC,GAAQ,OACnC,kBAAC,EAAD,CACEC,GAAID,EAASC,GACbC,IAAKF,EAASC,GACdf,KAAMc,EAASd,KACfC,YAAaa,EAASb,YACtBC,QAASY,EAASZ,kB,GAjCZe,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.02e6aacd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction CustomerCard(props) {\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"content\">\r\n                <ul>\r\n                    <li>\r\n                        Name: {props.name}\r\n                    </li>\r\n                    <li>\r\n                        Transaction Amount: ${props.transaction}\r\n                    </li>\r\n                    <li>\r\n                        Rewards: {props.rewards} points\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CustomerCard;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n    return <div className=\"wrapper\">{props.children}</div>\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Title(props) {\r\n    return <h1 className=\"title\">{props.children}</h1>\r\n}\r\n\r\nexport default Title;","import React, { Component } from \"react\";\nimport CustomerCard from \"./components/Customers\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport transactions from \"./models/transactions.json\";\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    transactions\n  }\n\n  componentDidMount() {\n    // loops over each transactions to look at the price and adds reward points\n    transactions.forEach(function (element) {\n      if (element.transaction <= 50) {\n        // if $50 or under, no points are added\n        element.rewards = 0;\n      } else if (element.transaction > 50 && element.transaction <= 100) {\n        // if over $50, add 1 point for ever dollar after 50\n        element.rewards = (element.transaction - 50) * 1;\n      } else if (element.transaction > 100) {\n        // if over $100, add 2 points for every dollar after 100 and 1 point for every dollar over 50 up to 100\n        element.rewards = (element.transaction - 100) * 2 + 50\n      }\n    })\n    // update the state with the new transactions object\n    this.setState({ transactions })\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <Title>Rewards Program</Title>\n        {this.state.transactions.map(customer => (\n          <CustomerCard\n            id={customer.id}\n            key={customer.id}\n            name={customer.name}\n            transaction={customer.transaction}\n            rewards={customer.rewards}\n          />\n        ))}\n      </Wrapper>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}